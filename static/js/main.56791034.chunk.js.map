{"version":3,"sources":["actions.js","api/api.js","constants.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/CounterButton.jsx","components/Header.jsx","containers/App.js","registerServiceWorker.js","reducers.js","index.js"],"names":["requestRobots","dispatch","link","type","fetch","then","response","json","data","payload","catch","error","Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","console","log","map","user","i","components_Card","key","SearchBox","searchfield","searchChange","aria-label","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundary","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","info","setState","Component","CounterButton","_Component","_getPrototypeOf2","_len","arguments","length","args","Array","_key","apply","count","updateCount","inherits","createClass","value","color","onClick","Header","_PureComponent","components_CounterButton","PureComponent","App","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","components_Header","components_SearchBox","components_Scroll","ErrorBoundry","components_CardList","connect","searchRobots","event","target","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","initialStateSearch","initialStateRobots","rootReducers","createLogger","combineReducers","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"4RAWaA,EAAgB,kBAAM,SAACC,GCXb,IAACC,EDYtBD,EAAS,CAAEE,KEVyB,4BDFdD,EDad,6CCZRE,MAAMF,GAAMG,KAAK,SAAAC,GAAQ,OAAIA,EAASC,UDanCF,KAAK,SAAAG,GAAI,OAAIP,EAAS,CAAEE,KEXS,yBFWqBM,QAASD,MAC/DE,MAAM,SAAAC,GAAK,OAAIV,EAAS,CAAEE,KEXM,wBFWuBM,QAASE,QGDtDC,EAZF,SAAAC,GAAyB,IAAtBC,EAAsBD,EAAtBC,KAAMC,EAAgBF,EAAhBE,MAAOC,EAASH,EAATG,GAC3B,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uDACbH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,SAASC,IAAG,wBAAAC,OAA0BP,EAA1B,mBACrBC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAKL,GACLG,EAAAC,EAAAC,cAAA,SAAIJ,MCgBGS,EArBE,SAAAX,GAAgB,IAAbY,EAAaZ,EAAbY,OAGlB,OAFAC,QAAQC,IAAI,YAGVV,EAAAC,EAAAC,cAAA,WAEIM,EAAOG,IAAI,SAACC,EAAMC,GAChB,OACEb,EAAAC,EAAAC,cAACY,EAAD,CACEC,IAAKF,EACLd,GAAIS,EAAOK,GAAGd,GACdF,KAAMW,EAAOK,GAAGhB,KAChBC,MAAOU,EAAOK,GAAGf,YCEhBkB,EAfG,SAAApB,GAAmCA,EAAhCqB,YAAgC,IAAnBC,EAAmBtB,EAAnBsB,aAEhC,OADAT,QAAQC,IAAI,aAEVV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,SACEiB,aAAW,gBACXhB,UAAU,mCACVjB,KAAK,SACLkC,YAAY,gBACZC,SAAUH,MCDHI,EARA,SAACC,GACd,OACEvB,EAAAC,EAAAC,cAAA,OAAKsB,MAAO,CAAEC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,UAClEJ,EAAMK,WCeEC,cAjBb,SAAAA,EAAaN,GAAO,IAAAO,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IAClBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMV,KACDc,MAAQ,CAAEC,UAAU,GAFPR,iFAKDpC,EAAO6C,GACxBN,KAAKO,SAAS,CAAEF,UAAU,qCAI1B,OAAIL,KAAKI,MAAMC,SACNtC,EAAAC,EAAAC,cAAA,mCAEF+B,KAAKV,MAAMK,gBAdMa,aCuBbC,EAvBf,SAAAC,GAAA,SAAAD,IAAA,IAAAE,EAAAd,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAS,GAAA,QAAAG,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GAAA,OAAApB,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,MAAAW,EAAAb,OAAAI,EAAA,EAAAJ,CAAAW,IAAAN,KAAAe,MAAAP,EAAA,CAAAX,MAAA3B,OAAA0C,MAEIX,MAAM,CACFe,MAAO,GAHftB,EAYIuB,YAAY,WACRvB,EAAKU,SAAS,SAAAH,GAAQ,MAAO,CAACe,MAAOf,EAAMe,MAAQ,MAb3DtB,EAAA,OAAAC,OAAAuB,EAAA,EAAAvB,CAAAW,EAAAC,GAAAZ,OAAAwB,EAAA,EAAAxB,CAAAW,EAAA,EAAA3B,IAAA,SAAAyC,MAAA,WAiBI,OADE/C,QAAQC,IAAI,iBAEVV,EAAAC,EAAAC,cAAA,UAAQuD,MAAOxB,KAAKV,MAAMkC,MAAOC,QAASzB,KAAKoB,aAA/C,UAAoEpB,KAAKI,MAAMe,WAlBvFV,EAAA,CAAmCD,aCkBpBkB,EAlBf,SAAAC,GAAA,SAAAD,IAAA,OAAA5B,OAAAC,EAAA,EAAAD,CAAAE,KAAA0B,GAAA5B,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA4B,GAAAR,MAAAlB,KAAAa,YAAA,OAAAf,OAAAuB,EAAA,EAAAvB,CAAA4B,EAAAC,GAAA7B,OAAAwB,EAAA,EAAAxB,CAAA4B,EAAA,EAAA5C,IAAA,SAAAyC,MAAA,WAOI,OADE/C,QAAQC,IAAI,UAEVV,EAAAC,EAAAC,cAAA,WACYF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,eAERH,EAAAC,EAAAC,cAAC2D,EAAD,CAAeJ,MAAO,aAXlCE,EAAA,CAA4BG,iBC4BtBC,qMAEF9B,KAAKV,MAAMyC,mDAGJ,IAAAC,EACoDhC,KAAKV,MAAxDf,EADDyD,EACCzD,OAAQ0D,EADTD,EACSC,YAAaC,EADtBF,EACsBE,eAAgBC,EADtCH,EACsCG,UACvCC,EAAiB7D,EAAO8D,OAAO,SAAAC,GACnC,OAAOA,EAAM1E,KAAK2E,cAAcC,SAASP,EAAYM,iBAEvD,OACExE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACbH,EAAAC,EAAAC,cAACwE,EAAD,MACA1E,EAAAC,EAAAC,cAACyE,EAAD,CAAWzD,aAAciD,IACzBnE,EAAAC,EAAAC,cAAC0E,EAAD,KACIR,EAAYpE,EAAAC,EAAAC,cAAA,qBACZF,EAAAC,EAAAC,cAAC2E,EAAD,KACE7E,EAAAC,EAAAC,cAAC4E,EAAD,CAAUtE,OAAQ6D,cAjBd5B,cA2BHsC,cA5CS,SAAC1C,GACvB,MAAO,CACL6B,YAAa7B,EAAM2C,aAAad,YAChC1D,OAAQ6B,EAAMtD,cAAcyB,OAC5B4D,UAAW/B,EAAMtD,cAAcqF,YAMR,SAACpF,GAC1B,MAAO,CACLmF,eAAgB,SAACc,GAAD,OAAWjG,EVhBU,CAAEE,KETT,qBFSmCM,QUgBdyF,EAAMC,OAAO1B,SAChEQ,gBAAiB,kBAAMhF,EAASD,QA+BrBgG,CAA6ChB,GC/CtDoB,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTtG,KAAK,SAAA0G,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB3D,QACfsD,UAAUC,cAAcO,WAK1B1F,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBjB,MAAM,SAAAC,GACLe,QAAQf,MAAM,4CAA6CA,KC/DjE,IAAM0G,EAAqB,CACzBlC,YAAa,IAYTmC,EAAqB,CACzB7F,OAAQ,GACR4D,WAAW,GCNPkC,SAFSC,yBAEMC,YAAgB,CAACzH,cDST,WAAyC,IAAxCsD,EAAwCS,UAAAC,OAAA,QAAA0D,IAAA3D,UAAA,GAAAA,UAAA,GAAlCuD,EAAoBK,EAAc5D,UAAAC,OAAA,QAAA0D,IAAA3D,UAAA,GAAAA,UAAA,GAAP,GAC7D,OAAQ4D,EAAOxH,MACb,IVzBkC,yBU0BhC,OAAO6C,OAAO4E,OAAO,GAAItE,EAAO,CAAC+B,WAAW,IAC9C,IV1BkC,yBU2BhC,OAAOrC,OAAO4E,OAAO,GAAItE,EAAO,CAAC7B,OAAQkG,EAAOlH,QAAS4E,WAAW,IACtE,IV3BiC,wBU4B/B,OAAOrC,OAAO4E,OAAO,GAAItE,EAAO,CAAC3C,MAAOgH,EAAOlH,UACjD,QACE,OAAO6C,IClBwC2C,aDLzB,WAAyC,IAAxC3C,EAAwCS,UAAAC,OAAA,QAAA0D,IAAA3D,UAAA,GAAAA,UAAA,GAAlCsD,EAAoBM,EAAc5D,UAAAC,OAAA,QAAA0D,IAAA3D,UAAA,GAAAA,UAAA,GAAP,GAC5D,OAAQ4D,EAAOxH,MACb,IVb8B,qBUc5B,OAAO6C,OAAO4E,OAAO,GAAItE,EAAO,CAAC6B,YAAawC,EAAOlH,UACvD,QACE,OAAO6C,OCEPuE,EAAQC,YAAYP,EAAcQ,YAAgBC,MAExDC,IAASC,OACPjH,EAAAC,EAAAC,cAACgH,EAAA,EAAD,CAAUN,MAAOA,GACf5G,EAAAC,EAAAC,cAACiH,EAAD,OAEFC,SAASC,eAAe,SFJX,WACb,GAA6C,kBAAmB1B,UAAW,CAGzE,GADkB,IAAI2B,IAAIC,0BAAwBlC,OAAOC,UAC3CkC,SAAWnC,OAAOC,SAASkC,OAIvC,OAGFnC,OAAOoC,iBAAiB,OAAQ,WAC9B,IAAM/B,EAAK,GAAApF,OAAMiH,0BAAN,sBAEPpC,EAwCV,SAAiCO,GAE/BvG,MAAMuG,GACHtG,KAAK,SAAAC,GAGkB,MAApBA,EAASqI,SACuD,IAAhErI,EAASsI,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7ClC,UAAUC,cAAckC,MAAM1I,KAAK,SAAA0G,GACjCA,EAAaiC,aAAa3I,KAAK,WAC7BiG,OAAOC,SAAS0C,aAKpBvC,EAAgBC,KAGnBjG,MAAM,WACLgB,QAAQC,IACN,mEA5DAuH,CAAwBvC,GAGxBD,EAAgBC,MEbxBwC","file":"static/js/main.56791034.chunk.js","sourcesContent":["import { apiCall } from './api/api'\nimport {\n  CHANGE_SEARCHFIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n } from './constants'\n\n\nexport const setSearchField = (text) => ({ type: CHANGE_SEARCHFIELD, payload: text })\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING })\n  apiCall('https://jsonplaceholder.typicode.com/users')\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n}","export const apiCall = (link) =>\n  fetch(link).then(response => response.json())","export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\n      <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  console.log('CardList')\n\n  return (\n    <div>\n      {\n        robots.map((user, i) => {\n          return (\n            <Card\n              key={i}\n              id={robots[i].id}\n              name={robots[i].name}\n              email={robots[i].email}\n              />\n          );\n        })\n      }\n    </div>\n  );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n  console.log('SearchBox')\n  return (\n    <div className='pa2'>\n      <input\n        aria-label=\"Serach robots\"\n        className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='search robots'\n        onChange={searchChange}\n      />\n    </div>\n  );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;","import React, { Component } from 'react'\n\nclass ErrorBoundary extends Component {\n  constructor (props) {\n    super(props)\n    this.state = { hasError: false }\n  }\n\n  componentDidCatch (error, info) {\n    this.setState({ hasError: true })\n  }\n\n  render () {\n    if (this.state.hasError) {\n      return <h1>Something went wrong.</h1>\n    }\n    return this.props.children\n  }\n}\n\nexport default ErrorBoundary","import React, { Component } from 'react'\r\n\r\nexport class CounterButton extends Component {\r\n\r\n    state={\r\n        count: 0\r\n    }\r\n    // shouldComponentUpdate(nextProps, nextState){\r\n\r\n    //     if(this.state.count !== nextState.count)\r\n    //         return true\r\n    //     else\r\n    //         return false\r\n    // }\r\n    updateCount=()=>{\r\n        this.setState(state=>{return {count: state.count + 1}})\r\n    }\r\n  render() {\r\n      console.log('CounterButton')\r\n    return (\r\n        <button color={this.props.color} onClick={this.updateCount}>Count: {this.state.count}</button>\r\n    )\r\n  }\r\n}\r\n\r\nexport default CounterButton\r\n","import React, { PureComponent } from 'react'\r\nimport CounterButton from './CounterButton'\r\nexport class Header extends PureComponent {\r\n\r\n    // shouldComponentUpdate(nextProps, nextState){\r\n    //     return false;\r\n    // }\r\n  render() {\r\n      console.log('Header')\r\n    return (\r\n        <div>\r\n                    <h1 className='f1'>RoboFriends</h1>\r\n\r\n            <CounterButton color={'red'} />\r\n        </div>\r\n        \r\n    )\r\n  }\r\n}\r\n\r\nexport default Header\r\n\r\n// import React from 'react'\r\n// import CounterButton from './CounterButton'\r\n// export default function Header() {\r\n//     console.log('Header')\r\n//   return (\r\n//     <div>\r\n//     <h1 className='f1'>RoboFriends</h1>\r\n\r\n// <CounterButton color={'red'} />\r\n// </div>\r\n//   )\r\n// }\r\n\r\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { setSearchField, requestRobots } from '../actions';\n\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport Header from '../components/Header'\n\nimport './App.css';\n\n// parameter state comes from index.js provider store state(rootReducers)\nconst mapStateToProps = (state) => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending\n  }\n}\n\n// dispatch the DOM changes to call an action. note mapStateToProps returns object, mapDispatchToProps returns function\n// the function returns an object then uses connect to change the data from redecers.\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n}\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  render() {\n    const { robots, searchField, onSearchChange, isPending } = this.props;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    })\n    return (\n      <div className='tc'>\n        <Header />\n        <SearchBox searchChange={onSearchChange}/>\n        <Scroll>\n          { isPending ? <h1>Loading</h1> :\n            <ErrorBoundry>\n              <CardList robots={filteredRobots} />\n            </ErrorBoundry>\n          }\n        </Scroll>\n      </div>\n    );\n  }\n}\n\n// action done from mapDispatchToProps will channge state from mapStateToProps\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  CHANGE_SEARCHFIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n } from './constants';\n\nconst initialStateSearch = {\n  searchField: ''\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n  switch (action.type) {\n    case CHANGE_SEARCHFIELD:\n      return Object.assign({}, state, {searchField: action.payload})\n    default:\n      return state\n  }\n}\n\nconst initialStateRobots = {\n  robots: [],\n  isPending: true\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, {isPending: true})\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, {robots: action.payload, isPending: false})\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, {error: action.payload})\n    default:\n      return state\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport 'tachyons';\n\nimport App from './containers/App';\nimport registerServiceWorker from './registerServiceWorker';\nimport { requestRobots, searchRobots } from './reducers'\n\nimport './index.css';\n\nconst logger = createLogger()\n\nconst rootReducers = combineReducers({requestRobots, searchRobots})\n\nconst store = createStore(rootReducers, applyMiddleware(thunkMiddleware))\n\nReactDOM.render(\n  <Provider store={store}>\n    <App/>\n  </Provider>,\n  document.getElementById('root')\n);\nregisterServiceWorker();\n"],"sourceRoot":""}